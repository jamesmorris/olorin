
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JSlider;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FindSegmentsDialog3.java
 *
 * Created on 15-Sep-2011, 09:45:30
 */
/**
 *
 * @author jm20
 */
public class FindSegmentsDialog extends javax.swing.JDialog {
    private VCFMeta meta;
    private ArrayList<String> selectedInfo;
    private boolean success;
    private int selected;
    private int minMatches;
    private double freqCutoff;
    private String freqFile;
    private ArrayList<Boolean> selectedCols;

    /** Creates new form FindSegmentsDialog3 */
    public FindSegmentsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    FindSegmentsDialog(int s, VCFMeta m, ArrayList<Boolean> oldSelectedCols) {
        meta = m;
        selected = s;
        setMinMatches(selected);        
        initComponents();
        setOldSelectedCols(oldSelectedCols);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        filteringPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        minMatchSlider = new javax.swing.JSlider(JSlider.HORIZONTAL,2, selected, selected);
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        freqCutoffField = new javax.swing.JTextField();
        freqFilterBut = new javax.swing.JRadioButton();
        openFreqBut = new javax.swing.JButton();
        freqText = new javax.swing.JTextField();
        resultsPanel = new javax.swing.JScrollPane();
        vcfTable = new javax.swing.JTable();
        cancelBut = new javax.swing.JButton();
        okBut = new javax.swing.JButton();
        clearAllBut = new javax.swing.JToggleButton();
        selectAllBut = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Minimum number of matching chromosomes:");

        minMatchSlider.setMajorTickSpacing(1);
        minMatchSlider.setPaintTicks(true);
        minMatchSlider.setPaintLabels(true);
        minMatchSlider.setSnapToTicks(true);

        jLabel2.setText("Frequency File:");

        jLabel3.setText("Maximum frequency of variants:");

        freqCutoffField.setText("0.05");
        freqCutoffField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freqCutoffFieldActionPerformed(evt);
            }
        });

        freqFilterBut.setText("Filter variants by frequency");

        openFreqBut.setText("Browse");
        openFreqBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFreqButActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout filteringPanelLayout = new org.jdesktop.layout.GroupLayout(filteringPanel);
        filteringPanel.setLayout(filteringPanelLayout);
        filteringPanelLayout.setHorizontalGroup(
            filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(filteringPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filteringPanelLayout.createSequentialGroup()
                        .add(filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(minMatchSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1)
                            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
                        .add(63, 63, 63))
                    .add(filteringPanelLayout.createSequentialGroup()
                        .add(freqFilterBut)
                        .addContainerGap(288, Short.MAX_VALUE))
                    .add(filteringPanelLayout.createSequentialGroup()
                        .add(filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, freqCutoffField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, freqText)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(openFreqBut)
                        .add(191, 191, 191))))
        );
        filteringPanelLayout.setVerticalGroup(
            filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(filteringPanelLayout.createSequentialGroup()
                .add(49, 49, 49)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(minMatchSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(71, 71, 71)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(freqFilterBut)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(filteringPanelLayout.createSequentialGroup()
                        .add(jLabel2)
                        .add(36, 36, 36))
                    .add(filteringPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(freqText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(openFreqBut)))
                .add(17, 17, 17)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(freqCutoffField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(107, 107, 107))
        );

        jTabbedPane1.addTab("Filtering Options", filteringPanel);

        vcfTable.setModel(new FilterTableModel(meta));
        resultsPanel.setViewportView(vcfTable);

        jTabbedPane1.addTab("Results Options", resultsPanel);

        cancelBut.setText("Cancel");
        cancelBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButActionPerformed(evt);
            }
        });

        okBut.setText("Filter");
        okBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButActionPerformed(evt);
            }
        });

        clearAllBut.setText("Clear All");
        clearAllBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButActionPerformed(evt);
            }
        });

        selectAllBut.setText("Select All");
        selectAllBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(cancelBut)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 63, Short.MAX_VALUE)
                .add(clearAllBut)
                .add(18, 18, 18)
                .add(selectAllBut)
                .add(56, 56, 56)
                .add(okBut)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 519, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelBut)
                    .add(okBut)
                    .add(clearAllBut)
                    .add(selectAllBut))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void freqCutoffFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freqCutoffFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_freqCutoffFieldActionPerformed

private void okButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButActionPerformed
    selectedCols = ((FilterTableModel) vcfTable.getModel()).getSelected();
    selectedInfo = new ArrayList<String>();
    ArrayList<HashMap<String, String>> infos = meta.getInfo();
    HashMap<String, String> info;
    String id;
    for (int i = 0; i < meta.info.size(); i++) {
        if (selectedCols.get(i)) {
            info = infos.get(i);
            id = info.get("ID");
            selectedInfo.add(id);
//            selectedInfo.add(meta.getInfo().get(i).get("ID"));
        }
    }
    setFreqFile(freqText.getText());
    setFreqCutoff(Double.parseDouble(freqCutoffField.getText()));
    setMinMatches(minMatchSlider.getValue());
    setSuccess(true);
    this.dispose();
}//GEN-LAST:event_okButActionPerformed

private void cancelButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButActionPerformed
    setSuccess(false);
    this.dispose();
}//GEN-LAST:event_cancelButActionPerformed

private void openFreqButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFreqButActionPerformed
    JFileChooser jfc = new JFileChooser();
    if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        try {
            freqText.setText(jfc.getSelectedFile().getAbsolutePath());
        } finally {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
}//GEN-LAST:event_openFreqButActionPerformed

private void clearAllButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButActionPerformed
    int rowCount = ((FilterTableModel) vcfTable.getModel()).getRowCount();
    for (int i = 0; i < rowCount; i++) {
        ((FilterTableModel) vcfTable.getModel()).clearAll(i);
    }
}//GEN-LAST:event_clearAllButActionPerformed

private void selectAllButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButActionPerformed
    int rowCount = ((FilterTableModel) vcfTable.getModel()).getRowCount();
    for (int i = 0; i < rowCount; i++) {
        ((FilterTableModel) vcfTable.getModel()).selectAll(i);
    }
}//GEN-LAST:event_selectAllButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindSegmentsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindSegmentsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindSegmentsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindSegmentsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FindSegmentsDialog dialog = new FindSegmentsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBut;
    private javax.swing.JToggleButton clearAllBut;
    private javax.swing.JPanel filteringPanel;
    private javax.swing.JTextField freqCutoffField;
    private javax.swing.JRadioButton freqFilterBut;
    private javax.swing.JTextField freqText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSlider minMatchSlider;
    private javax.swing.JButton okBut;
    private javax.swing.JButton openFreqBut;
    private javax.swing.JScrollPane resultsPanel;
    private javax.swing.JToggleButton selectAllBut;
    private javax.swing.JTable vcfTable;
    // End of variables declaration//GEN-END:variables

    public ArrayList<String> getSelectedInfo() {
        return selectedInfo;
    }

    public ArrayList<Boolean> getSelectedCols() {
        return selectedCols;
    }

    private void setOldSelectedCols(ArrayList<Boolean> oldSelectecCols) {
        if (oldSelectecCols.size() > 0) {
            int rowCount = ((FilterTableModel) vcfTable.getModel()).getRowCount();
            for (int i = 0; i < rowCount; i++) {
                if (oldSelectecCols.get(i)) {
                    ((FilterTableModel) vcfTable.getModel()).setSelected(i, 2);
                }
            }
        }
    }

    public boolean success() {
        return success;
    }

    private void setSuccess(boolean b) {
        success = b;
    }

    public int getMinMatches() {
        return minMatches;
    }

    private void setMinMatches(int s) {
        minMatches = s;
    }

    public double getFreqCutoff() {
        return freqCutoff;
    }

    private void setFreqCutoff(double d) {
        freqCutoff = d;
    }

    boolean freqFilter() {
        if (freqFilterBut.isSelected()) {
            return true;
        } else {
            return false;
        }
    }

    private void setFreqFile(String s) {
        freqFile = s;
    }

    String getFreqFile() {
        return freqFile;
    }
}
